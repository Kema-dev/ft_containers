------------------------------------------
---------------VECTOR TESTS---------------
------------------------------------------

----------TESTING pop_back()----------
MyVector_1: 1 2 3 4 5 
MyVector_1 should contain: 1 2 3 4
MyVector_1 after pop_back(): 1 2 3 4 

----------TESTING swap() operator[]----------
MyVector_2 contains: 100 100 100 
MyVector_3 contains: 200 200 200 200 200 
Swapping MyVector_2 and MyVector_3
MyVector_2 contains: 200 200 200 200 200
MyVector_3 contains: 100 100 100

----------TESTING constructors----------
MyVector_5 should contain: 100 100 100 100
MyVector_5 contains: 100 100 100 100
MyVector_6 should contain: 100 100 100 100
MyVector_6 contains: 100 100 100 100
MyVector_7 should contain: 100 100 100 100
MyVector_7 contains: 100 100 100 100
MyVector_8 should contain: 16 2 77 29
MyVector_8 contains: 16 2 77 29

----------TESTING reverse iterators----------
MyVector_9 should contain: 5 4 3 2 1
MyVector_9 contains: 5 4 3 2 1

----------TESTING size() capacity() max_size()----------
MyVector_10 size: 100
MyVector_10 capacity: 128
MyVector_10 max_size: 2305843009213693951

----------TESTING empty()----------
MyVector_11 total: 55

----------TESTING reserve()----------
Making MyVector_12 grow:
MyVector_12 capacity changed: 1
MyVector_12 capacity changed: 2
MyVector_12 capacity changed: 4
MyVector_12 capacity changed: 8
MyVector_12 capacity changed: 16
MyVector_12 capacity changed: 32
MyVector_12 capacity changed: 64
MyVector_12 capacity changed: 128
Making MyVector_13 grow:
MyVector_13 capacity changed: 100

----------TESTING at()----------
MyVector_14 contains: 0 1 2 3 4 5 6 7 8 9

----------TESTING front() back()----------
Front of MyVector_15: 78
Back of MyVector_15: 16
Front of MyVector_15 should be 62 (78-16)
Front of MyVector_15 is now 62

----------TESTING assign()----------
Size of MyVector_16: 7
Size of MyVector_17: 5
Size of MyVector_18: 3

----------TESTING insert() erase()----------
MyVector_19 contains: 100 100 100
MyVector_19 contains: 200 100 100 100
MyVector_19 contains: 300 300 200 100 100 100
MyVector_19 contains: 400 400 300 300 200 100 100 100
MyVector_19 contains: 501 502 503 400 400 300 300 200 100 100 100

----------TESTING clear()----------
MyVector_21 contains: 12332300 202332320 30233230
Clearing MyVector_21
MyVector_21 contains: 1101 2202

----------TESTING get_allocator()----------
The allocated array contains: 0 1 2 3 4

---------------------------------------
---------------MAP TESTS---------------
---------------------------------------

----------TESTING constructors()----------

----------TESTING operator= size()----------
First and second shouldn't have the same size
Size of first: 0
Size of second: 3

----------TESTING rbegin() rend()----------
z => 300
y => 200
x => 100

----------TESTING empty()----------
a => 10
b => 20
c => 30

----------TESTING max_size()----------
There is a problem

----------TESTING insert()----------
element 'z' already existed with a value of 200
mymap contains:
a => 100
b => 300
c => 400
z => 200
anothermap contains:
a => 100
b => 300
----------TESTING erase() find()----------
a => 10
d => 40

----------TESTING swap()----------
foo contains:
a => 11
b => 22
c => 33
bar contains:
x => 100
y => 200

----------TESTING clear()----------
mymap contains:
x => 100
y => 200
z => 300
mymap contains:
a => 1101
b => 2202

----------TESTING key_comp()----------
mymap contains:
a => 100
b => 200
c => 300


----------TESTING value_comp()----------
mymap contains:
x => 1001
y => 2002
z => 3003

----------TESTING count()----------
a is an element of mymap.
b is not an element of mymap.
c is an element of mymap.
d is not an element of mymap.
e is not an element of mymap.
f is an element of mymap.
g is not an element of mymap.

----------TESTING lower_bound() upper_bound()----------
a => 20
e => 100

----------TESTING equal_range()----------
lower bound points to: b => 20
upper bound points to: c => 30

----------TESTING get_allocator()----------
The allocated array has a size of 40 bytes.


---------------------------------------
--------------STACK TESTS--------------
---------------------------------------

----------TESTING empty()----------
total: 55

----------TESTING size()----------
0. size: 0
1. size: 5
2. size: 4

----------TESTING top()----------
mystack.top() is now 15

----------TESTING push()----------
Popping out elements... 4 3 2 1 0


---------------------------------------
---------------SET TESTS---------------
---------------------------------------

----------TESTING constructor()----------

----------TESTING operator=----------
Size of first: 0
Size of second: 5

----------TESTING begin() end()----------
myset contains: 13 23 42 65 75

----------TESTING rbegin() rend()----------
myset contains: 78 64 49 21 17

----------TESTING empty()----------
myset contains: 10 20 30

----------TESTING size()----------
0. size: 0
1. size: 10
2. size: 11
3. size: 10

----------TESTING max_size()----------
The set contains 1000 elements.

----------TESTING insert()----------
myset contains: 5 10 15 20 24 25 26 30 40 50

----------TESTING erase()----------
----------TESTING swap()----------
first contains: 20 25 32
second contains: 10 12 75

----------TESTING clear()----------
myset contains: 100 200 300
myset contains: 1101 2202

----------TESTING key_comp()----------
myset contains: 0 1 2 3 4

----------TESTING value_comp()----------
myset contains: 0 1 2 3 4

----------TESTING find()----------
myset contains: 10 30 50

----------TESTING count()----------
0 is not an element of myset.
1 is not an element of myset.
2 is not an element of myset.
3 is an element of myset.
4 is not an element of myset.
5 is not an element of myset.
6 is an element of myset.
7 is not an element of myset.
8 is not an element of myset.
9 is an element of myset.

----------TESTING lower_bound() upper_bound()----------
myset contains: 10 20 70 80 90

----------TESTING equal_range()----------
the lower bound points to: 30
the upper bound points to: 40

----------TESTING get_allocator()----------
The allocated array contains: 10 20 30 40 50

